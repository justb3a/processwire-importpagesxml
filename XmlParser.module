<?php

/**
 * ProcessWire XML Parser
 *
 * ProcessWire 2.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * @author Tabea David <td@justonestep.de>
 * @version 0.0.1
 * @copyright Copyright (c) 2015 
 * @see https://github.com/justonestep/processwire-xmlparser
 * @see http://www.processwire.com
 */

require_once(wire('config')->paths->XmlParser . 'lib/Parser.php');
require_once(wire('config')->paths->XmlParser . 'lib/View.php');
use Jos\Parser;
use Jos\View;

/**
 * Class XmlParser
 */
class XmlParser extends Process implements Module  {

  const PAGE_NAME = 'XML Parser';
  const MODULE_NAME = 'XmlParser';
  const PERMISSION = 'xmlparser';

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  static public function getModuleInfo() {
    return array(
      'title' => 'XML Parser',
      'version' => 001,
      'summary' => '',
      'author' => 'Tabea David',
      'icon' => 'th-list',
      'href' => 'https://github.com/justonestep/processwire-xmlparser',
      'useNavJSON' => true,
      'permission' => 'xmlparser',
      'permissions' => array(
        'xmlparser' => 'Administer XML Parser'
      ),
      'singular' => false,
      'autoload' => true,
    );
  }

  /**
   * @field array Default config values
   */
  protected static $defaults = array(
    'xpTmplate' => '',
    'xpParent' => '',
    'xpFields' => ''
  );

  protected $output = '';

 /**
  * construct
  */
  public function __construct() {
    $this->parser = new Parser;
    $this->view = new View;
  }

  /**
   * Initialize the module
   *
   */
  public function init() {
    if ($this->permissions->get(self::PERMISSION)->id && !$this->user->hasPermission(self::PERMISSION)) {
      throw new WirePermissionException('You have no permission to use this module');
    }
  }

  /**
   * Display XML Parser Settings
   * This function is executed when a page with this Process assigned is accessed.
   */
  public function execute() {
    $action = $this->input->get->action;

    // first usage OR action `edit-preconf`
    if (!$this->parser->isPreconfigured() || $action === 'edit-preconf') 
      $this->output .= $this->view->renderPreconfigurationForm();

    // action `edit-conf`
    if ($action === 'edit-conf') $this->output .= $this->view->renderMappingForm();

    // submit action `edit-preconf`
    if ($this->input->post->preconfigSubmit) $this->parser->setPreconfiguration();

    // submit action `edit-conf`
    if ($this->input->post->mappingSubmit) $this->parser->setConfiguration();

    // view
    if (!$action) {
      $this->output .= $this->view->render();
      $form = $this->view->renderUploadForm();
      $this->output .= $this->view->renderUploadedFile();
      $this->output .= $form->render();

      // submit upload xml file
      if ($this->input->post->uploadSubmit) {
        $this->parser->setXmlFile($form);
      }
    }

    // action `parse`
    if ($action === 'parse') {
      $count = $this->parser->parse();
      $this->output .= sprintf(__("Created %d pages."), $count); 
    }

    return $this->output;
  }

  /**
   * Install routine
   * A new page with this Process module assigned is created.
   */
  public function ___install() {
    // create XML Parser Admin page
    $page = $this->pages->get('template=admin, name=' . self::PAGE_NAME);
    if (!$page->id) {
      $page = new Page();
      $page->template = 'admin';
      $page->parent = $this->pages->get($this->config->adminRootPageID);
      $page->title = self::PAGE_NAME;
      $page->name = self::PAGE_NAME;
      $page->process = $this;
      $page->save();

      $this->message("Created Page: {$page->path}");
    }

    // create permission to limit access to the module
    $permission = $this->permissions->get(self::PERMISSION);
    if (!$permission->id) {
      $permission = new Permission();
      $permission->name = self::PERMISSION;
      $permission->title = $this->_('Edit XML Parser');
      $permission->save();

      $this->message('Created new permission: ' . self::PERMISSION);
    }
  }

  /**
   * Uninstall routine
   * 
   * This should return the site to the same state 
   * it was in before the module was installed. 
   */
  public function ___uninstall() {
    // delete the admin page
    $moduleID = $this->modules->getModuleID($this); 
    $selector = "template=admin, process=$moduleID, name=" . self::PAGE_NAME;
    $page = $this->pages->get($selector); 

    if ($page->id) {
      $page->delete();
      $this->message("Deleted Page: {$page->path}"); 
    }

    // delete the xmlparser permission
    $permission = $this->permissions->get(self::PERMISSION);
    if ($permission->id) {
      $permission->delete();
      $this->message("Deleted Permission: " . self::PERMISSION);
    }
  }
}
